// Code generated by __generator__/interpreter.go at once

package builtin

import (
	"github.com/ysugimoto/falco/interpreter/context"
	"github.com/ysugimoto/falco/interpreter/function/errors"
	"github.com/ysugimoto/falco/interpreter/function/shared"
	"github.com/ysugimoto/falco/interpreter/value"
)

const Time_interval_elapsed_ratio_Name = "time.interval_elapsed_ratio"

var Time_interval_elapsed_ratio_ArgumentTypes = []value.Type{value.TimeType, value.TimeType, value.TimeType}

func Time_interval_elapsed_ratio_Validate(args []value.Value) error {
	if len(args) != 3 {
		return errors.ArgumentNotEnough(Time_interval_elapsed_ratio_Name, 3, args)
	}
	args = shared.CoerceArguments(args, Time_interval_elapsed_ratio_ArgumentTypes)
	for i := range args {
		if args[i].Type() != Time_interval_elapsed_ratio_ArgumentTypes[i] {
			return errors.TypeMismatch(Time_interval_elapsed_ratio_Name, i+1, Time_interval_elapsed_ratio_ArgumentTypes[i], args[i].Type())
		}
	}
	return nil
}

// Fastly built-in function implementation of time.interval_elapsed_ratio
// Arguments may be:
// - TIME, TIME, TIME
// Reference: https://developer.fastly.com/documentation/reference/vcl/functions/date-and-time/time-interval-elapsed-ratio/
func Time_interval_elapsed_ratio(ctx *context.Context, args ...value.Value) (value.Value, error) {
	// Argument validations
	if err := Time_interval_elapsed_ratio_Validate(args); err != nil {
		return value.Null, err
	}

	ref := value.Unwrap[*value.Time](args[0])
	start := value.Unwrap[*value.Time](args[1])
	end := value.Unwrap[*value.Time](args[2])

	return &value.Float{
		Value: float64(ref.Value.Unix()-start.Value.Unix()) / float64(end.Value.Unix()-start.Value.Unix()),
	}, nil
}
